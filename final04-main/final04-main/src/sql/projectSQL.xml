<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project">
 
	<!-- 프로젝트 저장 -->
	<insert id="insertProject" parameterType="projectDTO">
		<selectKey keyProperty="proNum" order="BEFORE" resultType="int">
		 select project_seq.nextVal from dual
		</selectKey>
		insert into project values(#{proNum} ,#{proName},#{proContent},#{userId},#{proStart},#{proEnd},#{dept},#{proState},#{code},#{name})	
	</insert>
	
	<!-- 유저아이디=이름 -->
	<select id="getName" parameterType="string" resultType="string">
		select name from Users where userId=#{value}
	</select>
	
	<!-- 전체 프로젝트 수 불러오기 -->
	<select id="countAll" resultType="int" parameterType="string">
		select count(*) from project where code=#{code}
	</select>

	<!--프로젝트 리스트 불러오기  -->
	<select id="getProjects" parameterType="hashmap" resultType="projectDTO">	
		<![CDATA[ 

			select * from (select rownum rnum, project.* from 
       			(select * from project where code=#{code} order by proNum desc) project) 
           			 where rnum >= #{start} and rnum <=#{end}
		]]>
	</select>
	
	<!-- 검색한 갯수 -->
	<select id="getSearchProjectCount" parameterType="hashmap" resultType="int">
		select count(*) from project where (code=#{code}) and ${sel} like '%'||#{search}||'%'
	</select>	
	<!-- 검색한 프로젝트 가져오기 -->
	<select id="getSearchProjects" parameterType="hashmap" resultType="projectDTO">		
		<![CDATA[
		 	select B.*, r
	  		 from (select A.*, rownum r from (select * from project where (code=#{code}) and ${sel} like '%'||#{search}||'%' order by proStart asc) A order by proStart asc) B
	  			 where r >= #{start} and r <= #{end}
		]]>
	</select>
	<!-- 진행중, 완료 상태 업데이트 -->
	<!-- 진행전 -->
	<update id="updat3" parameterType="string">
		<![CDATA[
			update project set proState='진행전' where (code=#{code}) and (to_char(proStart, 'yyyymmdd')) > to_char(sysdate, 'yyyymmdd')
		]]>
			
	</update>
	<!-- 프로젝트 진행중 -->
	<update id="updat2" parameterType="string">
		<![CDATA[
			update project set proState='진행중' where (code=#{code}) and (to_char(proStart, 'yyyymmdd') <= to_char(sysdate, 'yyyymmdd')) and (to_char(proEnd, 'yyyymmdd') >= to_char(sysdate, 'yyyymmdd'))
		]]>	
	</update>
	<!-- 완료 -->
	<update id="updat1" parameterType="string">
		<![CDATA[
			update project set proState='완료' where (code=#{code}) and (to_char(proEnd, 'yyyymmdd') < to_char(sysdate, 'yyyymmdd')) and (to_char(proStart, 'yyyymmdd') <= to_char(sysdate, 'yyyymmdd'))
		]]>
	</update>
	<!-- 진행중 완료 리스트 가져오기 -->	
	<select id="getProjectState" resultType="int" parameterType="hashmap">
		select count(*) from project where code=#{code} and proState like '%'||#{sort}||'%'
	</select>
	<select id="getState" parameterType="hashmap" resultType="projectDTO">
		<![CDATA[
	  	select B.*, r
	   	from (select A.*, rownum r from (select * from project where code=#{code} and proState=#{sort} order by proStart desc) A order by proEnd desc) B
	   		where r >= #{startRow} and r <= #{endRow}
		]]>
	</select>
	
	<!-- 한개의 프로젝트 가져오기 -->
	<select id="getOneProject" parameterType="int" resultType="projectDTO">
		select * from project where proNum=#{value}	
	</select>

	<!-- 프로젝트 수정 -->
	<update id="updateProject" parameterType="projectDTO">
		update project set proName=#{proName}, proContent=#{proContent}
		where proNum=#{proNum}		
	</update>
	
	<!-- 프로젝트 삭제 -->
	<delete id="deleteProject" parameterType="string">
		delete from project where proNum=#{proNum}
	</delete>
	
	
</mapper>