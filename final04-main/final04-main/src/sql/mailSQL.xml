<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mail">
	
	<select id="recCount" resultType="int" parameterType="String">
		select count(*) from mail where mailRid = #{id} and riddel != '1'
	</select>
	
	<select id="recMailList" parameterType="hashmap" resultType="mailDTO">
		<![CDATA[
		select B.*, r from
			(select rownum r, A.* from
				(select * from mail where mailRid = #{id} and riddel != '1' order by mailreg desc)A 
			order by mailReg desc) B 
		where r >= #{start} and r <= #{end}
		]]>
	</select>
	
	<select id="recSearchCount" parameterType="hashmap" resultType="int">
		select count(*) from mail where ${sel} like '%'||#{search}||'%' and mailRid = #{id} and riddel != '1'
	</select>
	
	<select id="recMailSearch" parameterType="hashmap" resultType="mailDTO">
		<![CDATA[
		select B.*, r from
			(select rownum r, A.* from
				(select * from mail where ${sel} like '%'||#{search}||'%' and mailRid = #{id} and riddel != '1'
				order by mailreg desc)A 
			order by mailReg desc) B 
		where r >= #{start} and r <= #{end}
		]]>
	</select>
	
	<select id="sendCount" resultType="int" parameterType="String">
		select count(*) from mail where userId = #{id} and userDel != '1'
	</select>
	
	<select id="sendMailList" parameterType="hashmap" resultType="mailDTO">
		<![CDATA[
		select B.*, r from
			(select rownum r, A.* from
				(select * from mail where userId = #{id} and userDel != '1' order by mailreg desc)A 
			order by mailReg desc) B 
		where r >= #{start} and r <= #{end}
		]]>
	</select>
	
	<select id="sendSearchCount" parameterType="hashmap" resultType="int">
		select count(*) from mail where ${sel} like '%'||#{search}||'%' and userId = #{id} and userDel != '1'
	</select>
	
	<select id="sendMailSearch" parameterType="hashmap" resultType="mailDTO">
		<![CDATA[
		select B.*, r from
			(select rownum r, A.* from
				(select * from mail where ${sel} like '%'||#{search}||'%' and userId = #{id} and userDel != '1'
				order by mailreg desc)A 
			order by mailReg desc) B 
		where r >= #{start} and r <= #{end}
		]]>
	</select>
	
	
	<insert id="insertMail" parameterType="mailDTO">
		<selectKey keyProperty="mailNum" order="BEFORE" resultType="int">
			select mail_seq.nextVal from dual
		</selectKey>
		insert into mail(mailNum, userId, mailRid, mailSub, mailContent, fileName, mailReg, mailResult)
		values(#{mailNum}, #{userId}, #{mailRid}, #{mailSub}, #{mailContent}, #{fileName}, sysdate, '0')
	</insert>
	
	<update id="delRecMail" parameterType="HashMap">
		update mail set riddel = '1' where mailNum = #{no} and mailRid = #{id}
	</update>
	<update id="delSendMail" parameterType="HashMap">
		update mail set userDel = '1' where mailNum = #{no} and userid = #{id}
	</update>
	 
	 <update id="readResult" parameterType="Hashmap">
	 	update mail set mailResult = '1' where mailNum = #{num} and mailRid = #{id}
	 </update>
	 
	 <select id="getMail" parameterType="int" resultType="mailDTO">
	 	select * from mail where mailNum = #{value}
	 </select>
	 
	 <select id="userList" parameterType="String" resultType="userDTO">
	 	select * from users where code = #{code} and userId != #{id}
	 </select>
	 
	 <select id="getUserName" parameterType="String" resultType="String">
	 	select name from users where userId = #{value}
	 </select>
	 
	 <select id="getRidName" parameterType="String" resultType="String">
	 	select name from users where userId = #{value}
	 </select>
	 
	 <update id="updateUserName" parameterType="Hashmap">
	 	update mail set userName = #{userName} where userId = #{userId}
	 </update>
	 
	 <update id="updateRidName" parameterType="Hashmap">
	 	update mail set ridName = #{ridName} where mailRid = #{rid}
	 </update>
	 
	 <update id="deleteRec" parameterType="Hashmap">
	 	update mail set riddel = '1' where mailNum = #{num} and mailRid = #{id}
	 </update>
	 
	 <update id="deleteSend" parameterType="Hashmap">
	 	update mail set userDel = '1' where mailNum = #{num} and userId = #{id}
	 </update>

</mapper>


